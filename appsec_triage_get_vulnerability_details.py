from jira_utility.jira_api_actions import JiraApiActions
from checkmarx_utility.cx_api_actions import CxApiActions
from checkmarx_utility.helper_functions import HelperFunctions
from checkmarx_utility.cx_config_utility import Config

from utils.logger import Logger

import os
import sys
import argparse
import re
import time
import json

def get_severity_counts(scanner, severity_counters, total_count):
    result = {}
    
    if not severity_counters:
        # All severities are 0 if severity_counters is empty
        severities = ["HIGH", "MEDIUM", "LOW", "INFO"]
        for severity in severities:
            result[f"{scanner}_{severity}"] = 0
        result["TOTAL_COUNT"] = 0
        return result

    # Populate based on actual severity_counters
    for item in severity_counters:
        severity = item.get("severity", "").upper()
        count = item.get("counter", 0)
        result[f"{scanner}_{severity}"] = count

    result["TOTAL_COUNT"] = total_count
    return result 

def get_total_by_severity(scan_types : list) -> dict :
    scan_types_list = scan_types
    
    # Initialize severity
    severity_result = {'critical': 0, 'high': 0, 'medium': 0, 'low':0, 'info' : 0}

    for scan in scan_types_list:
        for severityObj in scan:
            severity = severityObj.get('severity').lower()
            count = severityObj.get('counter')

            severity_result[severity] += count
                
        
    return severity_result 

def assemble_url_link(url :str, scan_data : dict ) -> str:
    url_string = url
    project_id = scan_data.get('projectId')
    scan_id = scan_data.get('id')
    branch = scan_data.get('branch')

    return f"https://{url_string}/projects/{project_id}/scans?id={scan_id}&branch={branch}"

def main():
    
    # cx_config_environment = "CX-PRU-NPROD"
    # jira_config_environment = "JIRA-EIS"

    # jira_api_actions = JiraApiActions(jira_config_environment)
    cx_api_actions = CxApiActions()
    access_token = cx_api_actions.get_access_token()

    # Read GitHub event payload
    # with open(os.environ['GITHUB_EVENT_PATH']) as f:
    #     event = json.load(f)

    # payload = event.get("client_payload", {})
    # summary = payload.get("summary", "No summary provided")
    # description = payload.get("description", "No description provided")
    # reporter = payload.get("reporter", "No reporter provided")

    # project_name = payload.get("project_name", "No project name provided")
    # scan_id = payload.get("scan_id", "No scan ID provided")
    # scan_type = payload.get("scan_type", "No scan type provided")
    # vuln_id = payload.get("vuln_id", "No vulnerability ID provided")

    # print(f"Summary: {summary}")
    # print(f"Description: {description}")
    # print(f"Project Name: {project_name}")
    # print(f"Scan ID: {scan_id}")
    # print(f"Scan Type: {scan_type}")
    # print(f"Vulnerability ID: {vuln_id}")

    test_scan_id = "addc974e-0a52-4611-926e-56f61292cea2"
    test_vuln_id = "cd9s8uQEl8uLfOLx0e98dVshTBs="
    test_scan_type = "SAST"

    if test_scan_type == "SAST":
        # use SAST API
        print("SAST API")
        sast_result = cx_api_actions.get_sast_results(access_token, test_scan_id, test_vuln_id)
        pretty_json = json.dumps(sast_result, indent=4)

        print(pretty_json)

        # From the sast_result, get the queryID to query the description

    elif scan_type == "SCA":
        # use SCA API
        print("SCA API")
    elif scan_type == "CSEC":
        # use CSEC API
        print("CSEC API")
    else:
        print(f"The {scan_type} Scan type is not supported by this workflow automation.")

if __name__ == "__main__":
    main()