from jira_utility.jira_api_actions import JiraApiActions
from checkmarx_utility.cx_api_actions import CxApiActions
from checkmarx_utility.cx_token_manager import AccessTokenManager
from checkmarx_utility.helper_functions import HelperFunctions

from utils.logger import Logger

import os
import sys
import json

def get_severity_counts(scanner, severity_counters, total_count):
    result = {}
    
    if not severity_counters:
        # All severities are 0 if severity_counters is empty
        severities = ["HIGH", "MEDIUM", "LOW", "INFO"]
        for severity in severities:
            result[f"{scanner}_{severity}"] = 0
        result["TOTAL_COUNT"] = 0
        return result

    # Populate based on actual severity_counters
    for item in severity_counters:
        severity = item.get("severity", "").upper()
        count = item.get("counter", 0)
        result[f"{scanner}_{severity}"] = count

    result["TOTAL_COUNT"] = total_count
    return result 

def get_total_by_severity(scan_types : list) -> dict :
    scan_types_list = scan_types
    
    # Initialize severity
    severity_result = {'critical': 0, 'high': 0, 'medium': 0, 'low':0, 'info' : 0}

    for scan in scan_types_list:
        for severityObj in scan:
            severity = severityObj.get('severity').lower()
            count = severityObj.get('counter')

            severity_result[severity] += count
                
        
    return severity_result 

def assemble_url_link(url :str, scan_data : dict ) -> str:
    url_string = url
    project_id = scan_data.get('projectId')
    scan_id = scan_data.get('id')
    branch = scan_data.get('branch')

    return f"https://{url_string}/projects/{project_id}/scans?id={scan_id}&branch={branch}"

# The above functions are not being used

def package_and_version(package_verion):
    name, version = package_verion.rsplit(" ", 1)
    return name, version

def populate_multiple_sca_package_details(base_details, vulnerability_data):
    items = vulnerability_data["data"]["vulnerabilitiesRisksByScanId"]["items"]
    package_list = []

    for item in items:
        # pick first epss score
        epss_score = ""
        if item.get("epssData"):
            raw_epss = item["epssData"].get("epss")
            if raw_epss is not None:
                epss_score = round(raw_epss * 100, 2)  # keep 2 decimal places

        # getting cvss3 info
        attack_vector = ""
        attack_complexity = ""
        confidentiality_impact = ""
        availability_impact = ""
        if item.get("cvss3"):
            attack_vector = item["cvss3"].get("attackVector")
            attack_complexity = item["cvss3"].get("attackComplexity")
            confidentiality_impact = item["cvss3"].get("confidentiality")
            availability_impact = item["cvss3"].get("availability")

        # get exploitable paths
        exploitable_path = []
        if item.get("exploitablePath") is not None:
            exploitable_path = item.get("exploitablePath")

        # get package info
        package_info = item.get("packageInfo", {})
        package_name = package_info.get("name", "")
        package_version = package_info.get("version", "")
        package_repo = package_info.get("packageRepository", "")

        package_entry = {
            "cve_number": item.get("cve"),
            "cvss_score": item.get("score"),
            "cve_description": {
                "description": item.get("description"),
                "references": item.get("references"),
                "attack_vector": attack_vector,
                "attack_complexity": attack_complexity,
                "confidentiality_impact": confidentiality_impact,
                "availability_impact": availability_impact,
                "version_upgrade_recommendation": item.get("vulnerabilityFixResolutionText"),
                "exploitable_path": exploitable_path
            },
            "epss_score": epss_score,
            "package_name": package_name,
            "package_version": package_version,
            "package_repository": package_repo,
            "justification": "",
            "triage_status": ""
        }
        package_list.append(package_entry)

    base_details["package"] = package_list
    return base_details

def main():
    
    # cx_config_environment = "CX-PRU-NPROD"
    # jira_config_environment = "JIRA-EIS"

    # jira_api_actions = JiraApiActions(jira_config_environment)
    log = Logger("appsec_triage")
    access_token_manager = AccessTokenManager(logger=log)
    access_token = access_token_manager.get_valid_token()
    cx_api_actions = CxApiActions(access_token=access_token, logger=log)
    help = HelperFunctions()
    
    # Read GitHub event payload
    # with open(os.environ['GITHUB_EVENT_PATH']) as f:
    #     event = json.load(f)

    # payload = event.get("client_payload", {})
    # summary = payload.get("summary", "No summary provided")
    # description = payload.get("description", "No description provided")
    # reporter = payload.get("reporter", "No reporter provided")

    # project_name = payload.get("project_name", "No project name provided")
    # scan_id = payload.get("scan_id", "No scan ID provided")
    # scan_type = payload.get("scan_type", "No scan type provided")
    # vuln_id = payload.get("vuln_id", "No vulnerability ID provided")

    # print(f"Summary: {summary}")
    # print(f"Description: {description}")
    # print(f"Project Name: {project_name}")
    # print(f"Scan ID: {scan_id}")
    # print(f"Scan Type: {scan_type}")
    # print(f"Vulnerability ID: {vuln_id}")

    scan_id = "addc974e-0a52-4611-926e-56f61292cea2"
    vuln_id = "cd9s8uQEl8uLfOLx0e98dVshTBs="

    scan_id = "b371f6e8-a226-436a-9e96-404bae7675f9" 
    package_name = "org.springframework:spring-web 5.3.27"
    scan_type = "SCA"

    scan_details = cx_api_actions.get_scan_details(scan_id)
    branch = scan_details.get('branch')
    project_name = scan_details.get('projectName')
    project_id = scan_details.get('projectId')
    lbu_name = help.get_lbu_name_simple(project_name)

    log.info(f"Project Name: {project_name}")
    log.info(f"Branch: {branch}")
    log.info(f"LBU: {lbu_name}")

    base_details = {
        "lbu": lbu_name,
        "project_name": project_name,
        "branch_name": branch,
        "scan_id": scan_id,
        "scan_engine": scan_type,
        "vulnerability": [],
        "package": []
    }

    if scan_type == "SAST":

        # use SAST API
        log.info(f"Scan Type: {scan_type}")

        # Get the SAST scan results
        sast = cx_api_actions.get_sast_results(scan_id, vuln_id)
        sast_results = sast.get("results")
        query_id = sast_results[0].get("queryID")
        severity = sast_results[0].get("severity")
        state = sast_results[0].get("state")
        status = sast_results[0].get("status")

        # Get the Vulnerability Information
        query_description = cx_api_actions.get_query_descriptions(scan_id, query_id)

        vuln_name = query_description[0].get("queryName")
        vuln_source = query_description[0].get("querySource")
        vuln_source_path = query_description[0].get("querySourcePath")
        vuln_result_desc = query_description[0].get("resultDescription")
        vuln_risk = query_description[0].get("risk")
        vuln_cause = query_description[0].get("cause")
        vuln_recommendations = query_description[0].get("generalRecommendations")

        # Getting ready to be put to the JIRA ticket
        sast_vuln_info = {
            "lbu": lbu_name,
            "name": vuln_name,
            "source": vuln_source,
            "source-path": vuln_source_path,
            "description": vuln_result_desc,
            "severity": severity,
            "state": state,
            "status": status,
            "risk": vuln_risk,
            "cause": vuln_cause,
            "recommendations": vuln_recommendations
        }

        pretty_json = json.dumps(sast_vuln_info, indent=4)
        print(pretty_json)

    elif scan_type == "SCA":
        # use SCA API
        log.info(f"Scan Type: {scan_type}")

        package, version = package_and_version(package_name)
        
        # Get the SAST scan results
        sca = cx_api_actions.post_sca_vulnerability_details(scan_id, project_id, package, version)

        # Getting ready to be put to the JIRA ticket
        sca_vuln_info = populate_multiple_sca_package_details(base_details, sca)
        pretty_json = json.dumps(sca_vuln_info, indent=4)
        print(pretty_json)

    elif scan_type == "CSEC":
        # use CSEC API
        log.info(f"Scan Type: {scan_type}")
    elif scan_type == "DAST":
        # use DAST API
        log.info(f"Scan Type: {scan_type}")
    else:
        log.warning(f"The {scan_type} Scan type is not supported by this workflow automation.")

if __name__ == "__main__":
    main()